// <auto-generated />
using System;
using DatabaseCreation;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseCreation.Migrations
{
    [DbContext(typeof(GZMWebAppDbContext))]
    [Migration("20230815140513_Accord")]
    partial class Accord
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatabaseCreation.Accord", b =>
                {
                    b.Property<int>("AccordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccordId"));

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Varsayılan Akor");

                    b.HasKey("AccordId");

                    b.ToTable("Accord");
                });

            modelBuilder.Entity("DatabaseCreation.BaseNotes", b =>
                {
                    b.Property<int>("PerfumeId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("PerfumeId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("BaseNotes");
                });

            modelBuilder.Entity("DatabaseCreation.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Varsayılan Kategori");

                    b.Property<int>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("DatabaseCreation.Equalivent", b =>
                {
                    b.Property<int>("EqualiventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EqualiventId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("-");

                    b.Property<int>("EqualiventBrandId")
                        .HasColumnType("int");

                    b.Property<int>("PerfumeId")
                        .HasColumnType("int");

                    b.HasKey("EqualiventId");

                    b.HasIndex("EqualiventBrandId");

                    b.HasIndex("PerfumeId");

                    b.ToTable("Equalivent");
                });

            modelBuilder.Entity("DatabaseCreation.EqualiventBrand", b =>
                {
                    b.Property<int>("EqualiventBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EqualiventBrandId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Muadil Marka");

                    b.HasKey("EqualiventBrandId");

                    b.ToTable("EqualiventBrand");
                });

            modelBuilder.Entity("DatabaseCreation.MidNotes", b =>
                {
                    b.Property<int>("PerfumeId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("PerfumeId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("MidNotes");
                });

            modelBuilder.Entity("DatabaseCreation.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteId"));

                    b.Property<int>("AccordId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("?");

                    b.HasKey("NoteId");

                    b.HasIndex("AccordId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("DatabaseCreation.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("Fee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Payment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("Nakit");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("OrderId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("DatabaseCreation.Perfume", b =>
                {
                    b.Property<int>("PerfumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerfumeId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Bilinmeyen Marka");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("Unisex");

                    b.Property<string>("Info")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("Link")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Sillage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Smell")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("?");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Bilinmeyen Tip");

                    b.Property<string>("Weather")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("");

                    b.HasKey("PerfumeId");

                    b.ToTable("Perfume");
                });

            modelBuilder.Entity("DatabaseCreation.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Varsayılan Ürün");

                    b.Property<int?>("PerfumeId")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<long>("TotalSales")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PerfumeId")
                        .IsUnique()
                        .HasFilter("[PerfumeId] IS NOT NULL");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("DatabaseCreation.ProductOrder", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ProductOrder");
                });

            modelBuilder.Entity("DatabaseCreation.TopNotes", b =>
                {
                    b.Property<int>("PerfumeId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("PerfumeId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("TopNotes");
                });

            modelBuilder.Entity("DatabaseCreation.BaseNotes", b =>
                {
                    b.HasOne("DatabaseCreation.Note", "Note")
                        .WithMany("PerfumeBaseNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseCreation.Perfume", "Perfume")
                        .WithMany("BaseNotes")
                        .HasForeignKey("PerfumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Perfume");
                });

            modelBuilder.Entity("DatabaseCreation.Equalivent", b =>
                {
                    b.HasOne("DatabaseCreation.EqualiventBrand", "EqualiventBrand")
                        .WithMany("Equalivents")
                        .HasForeignKey("EqualiventBrandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DatabaseCreation.Perfume", "Perfume")
                        .WithMany("Equalivents")
                        .HasForeignKey("PerfumeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EqualiventBrand");

                    b.Navigation("Perfume");
                });

            modelBuilder.Entity("DatabaseCreation.MidNotes", b =>
                {
                    b.HasOne("DatabaseCreation.Note", "Note")
                        .WithMany("PerfumeMidNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseCreation.Perfume", "Perfume")
                        .WithMany("MidNotes")
                        .HasForeignKey("PerfumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Perfume");
                });

            modelBuilder.Entity("DatabaseCreation.Note", b =>
                {
                    b.HasOne("DatabaseCreation.Accord", "Accord")
                        .WithMany("Notes")
                        .HasForeignKey("AccordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Accord");
                });

            modelBuilder.Entity("DatabaseCreation.Product", b =>
                {
                    b.HasOne("DatabaseCreation.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DatabaseCreation.Perfume", "Perfume")
                        .WithOne("Product")
                        .HasForeignKey("DatabaseCreation.Product", "PerfumeId");

                    b.Navigation("Category");

                    b.Navigation("Perfume");
                });

            modelBuilder.Entity("DatabaseCreation.ProductOrder", b =>
                {
                    b.HasOne("DatabaseCreation.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DatabaseCreation.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DatabaseCreation.TopNotes", b =>
                {
                    b.HasOne("DatabaseCreation.Note", "Note")
                        .WithMany("PerfumeTopNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseCreation.Perfume", "Perfume")
                        .WithMany("TopNotes")
                        .HasForeignKey("PerfumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Perfume");
                });

            modelBuilder.Entity("DatabaseCreation.Accord", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("DatabaseCreation.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DatabaseCreation.EqualiventBrand", b =>
                {
                    b.Navigation("Equalivents");
                });

            modelBuilder.Entity("DatabaseCreation.Note", b =>
                {
                    b.Navigation("PerfumeBaseNotes");

                    b.Navigation("PerfumeMidNotes");

                    b.Navigation("PerfumeTopNotes");
                });

            modelBuilder.Entity("DatabaseCreation.Order", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("DatabaseCreation.Perfume", b =>
                {
                    b.Navigation("BaseNotes");

                    b.Navigation("Equalivents");

                    b.Navigation("MidNotes");

                    b.Navigation("Product");

                    b.Navigation("TopNotes");
                });

            modelBuilder.Entity("DatabaseCreation.Product", b =>
                {
                    b.Navigation("ProductOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
